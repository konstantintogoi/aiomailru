{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#aiomailru","title":"aiomailru","text":"<p>aiomailru is a python Mail.Ru API wrapper.</p>"},{"location":"#usage","title":"Usage","text":"<p>To use Mail.Ru API you need a registered app and Mail.Ru account. For more details, see aiomailru Documentation.</p>"},{"location":"#client-application","title":"Client application","text":"<p>Use <code>ClientSession</code> when REST API is needed in:</p> <ul> <li>a client component of the client-server application</li> <li>a standalone mobile/desktop application</li> </ul> <p>i.e. when you embed your app's info (private key) in publicly available code.</p> <pre><code>from aiomailru import ClientSession, API\nsession = ClientSession(app_id, private_key, access_token, uid)\napi = API(session)\nevents = await api.stream.get()\nfriends = await api.friends.getOnline()\n</code></pre> <p>Use <code>access_token</code> and <code>uid</code> that were received after authorization. For more details, see authorization instruction.</p>"},{"location":"#server-application","title":"Server application","text":"<p>Use <code>ServerSession</code> when REST API is needed in:</p> <ul> <li>a server component of the client-server application</li> <li>requests from your servers</li> </ul> <pre><code>from aiomailru import ServerSession, API\nsession = ServerSession(app_id, secret_key, access_token)\napi = API(session)\nevents = await api.stream.get()\nfriends = await api.friends.getOnline()\n</code></pre> <p>Use <code>access_token</code> that was received after authorization. For more details, see authorization instruction.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install aiomailru\n</code></pre>"},{"location":"#supported-python-versions","title":"Supported Python Versions","text":"<p>Python 3.7, 3.8, 3.9 are supported.</p>"},{"location":"#license","title":"License","text":"<p>aiomailru is released under the BSD 2-Clause License.</p>"},{"location":"authorization/","title":"Authorization","text":"<p>The preferred way to authorize is an <code>async with</code> statement. After authorization the session will have the following attributes:</p> <ul> <li><code>session_key</code> aka <code>access_token</code></li> <li><code>refresh_token</code></li> <li><code>expires_in</code></li> <li><code>uid</code></li> </ul>"},{"location":"authorization/#authorization-code-grant","title":"Authorization Code Grant","text":"<pre><code>from aiomailru import CodeSession, API\napp_id = 123456\nprivate_key = ''\nsecret_key = 'xyz'\nasync with CodeSession(app_id, private_key, secret_key, code, redirect_uri) as session:\napi = API(session)\n...\n</code></pre> <p>About OAuth 2.0 Authorization Code Grant: https://oauth.net/2/grant-types/authorization-code/</p> <p>For more details, see https://api.mail.ru/docs/guides/oauth/sites/ and https://api.mail.ru/docs/guides/oauth/mobile-web/</p>"},{"location":"authorization/#password-grant","title":"Password Grant","text":"<pre><code>from aiomailru import PasswordSession, API\napp_id = 123456\nprivate_key = 'abcde'\nsecret_key = ''\nasync with PasswordSession(app_id, private_key, secret_key, email, password, scope) as session:\napi = API(session)\n...\n</code></pre> <p>About OAuth 2.0 Password Grant: https://oauth.net/2/grant-types/password/</p> <p>For more details, see https://api.mail.ru/docs/guides/oauth/client-credentials/</p>"},{"location":"authorization/#refresh-token","title":"Refresh Token","text":"<pre><code>from aiomailru import RefreshSession, API\n\napp_id = 123456\nprivate_key = ''\nsecret_key = 'xyz'\n\nasync with RefreshSession(app_id, private_key, secret_key, refresh_token) as session:\n    api = API(session)\n    ...\n</code></pre> <p>About OAuth 2.0 Refresh Token: https://oauth.net/2/grant-types/refresh-token/</p> <p>For more details, see https://api.mail.ru/docs/guides/oauth/client-credentials/#refresh_token</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>If you use pip, just type</p> <pre><code>$ pip install aiomailru\n</code></pre> <p>You can install from the source code like</p> <pre><code>$ git clone https://github.com/konstantintogoi/aiomailru.git\n$ cd aiomailru\n$ python setup.py install\n</code></pre>"},{"location":"getting_started/#account","title":"Account","text":"<p>Sign up in Mail.Ru.</p>"},{"location":"getting_started/#application","title":"Application","text":"<p>After signing up visit Mail.Ru API documentation page and create a new application: https://api.mail.ru/apps/my/add.</p>"},{"location":"rest_api/","title":"REST API","text":"<p>List of all methods is available here: https://api.mail.ru/docs/reference/rest/.</p>"},{"location":"rest_api/#executing-requests","title":"Executing requests","text":"<p>For executing API requests call an instance of <code>APIMethod</code> class. You can get it as an attribute of <code>API</code> class instance or as an attribute of other <code>APIMethod</code> class instance.</p> <pre><code>from aiomailru import API\napi = API(session)\nevents = await api.stream.get()  # events for current user\nfriends = await api.friends.get()  # current user's friends\n</code></pre> <p>Under the hood each API request is enriched with parameters to generate signature:</p> <ul> <li><code>method</code></li> <li><code>app_id</code></li> <li><code>session_key</code></li> <li><code>secure</code></li> </ul> <p>and with the following parameter after generating signature:</p> <ul> <li><code>sig</code>, see https://api.mail.ru/docs/guides/restapi/#sig</li> </ul>"},{"location":"session/","title":"Session","text":"<p>The session makes GET requests when you call instance of <code>APIMethod</code> class that are returned as attributes of an <code>API</code> class instance.</p>"},{"location":"session/#request","title":"Request","text":"<p>By default, the session (<code>CodeSession</code>, <code>PasswordSession</code>, <code>RefreshSession</code>) tries to infer which signature generation circuit to use:</p> <ul> <li>if <code>uid</code> and <code>private_key</code> are not empty strings - client-server signature generation circuit is used</li> <li>else if <code>secret_key</code> is not an empty string - server-server signature generation circuit is used</li> <li>else exception is raised</li> </ul> <p>You can explicitly set a signature generation circuit for signing requests by passing to <code>API</code> one of the sessions below.</p>"},{"location":"session/#client-server-signature-generation-circuit","title":"Client-Server signature generation circuit","text":"<p>Let's consider the following example of API request with client-server signature:</p> <pre><code>from aiomailru import TokenSession, API\nsession = TokenSession(\napp_id=423004,\nprivate_key='7815696ecbf1c96e6894b779456d330e',\nsecret_key='',\naccess_token='be6ef89965d58e56dec21acb9b62bdaa',\nuid='1324730981306483817',\n)\napi = API(session)\nfriends = await api.friends.get()\n</code></pre> <p>It is equivalent to GET request:</p> <pre><code>https://appsmail.ru/platform/api\n    ?method=friends.get\n    &amp;app_id=423004\n&amp;session_key=be6ef89965d58e56dec21acb9b62bdaa\n    &amp;sig=5073f15c6d5b6ab2fde23ac43332b002\n</code></pre> <p>The following steps were taken:</p> <ol> <li>request parameters were sorted and concatenated - <code>app_id=423004method=friends.getsession_key=be6ef89965d58e56dec21acb9b62bdaa</code></li> <li><code>uid</code>, sorted request parameters, <code>private_key</code> were concatenated - <code>1324730981306483817app_id=423004method=friends.getsession_key=be6ef89965d58e56dec21acb9b62bdaa7815696ecbf1c96e6894b779456d330e</code></li> <li>signature <code>5073f15c6d5b6ab2fde23ac43332b002</code> calculated as MD5 of the previous string</li> <li>signature appended to GET request parameters</li> </ol> <p>For more details, see https://api.mail.ru/docs/guides/restapi/#client.</p>"},{"location":"session/#clientsession","title":"ClientSession","text":"<p><code>ClientSession</code> is a subclass of <code>TokenSession</code>.</p> <pre><code>from aiomailru import ClientSession, API\nsession = ClientSession(app_id, 'private key', 'access token', uid)\napi = API(session)\n...\n</code></pre>"},{"location":"session/#codeclientsession","title":"CodeClientSession","text":"<p><code>CodeClientSession</code> is a subclass of <code>CodeSession</code>.</p> <pre><code>from aiomailru import CodeClientSession, API\nasync with CodeClientSession(app_id, 'private key', code, redirect_uri) as session:\napi = API(session)\n...\n</code></pre>"},{"location":"session/#passwordclientsession","title":"PasswordClientSession","text":"<p><code>PasswordClientSession</code> is a subclass of <code>PasswordSession</code>.</p> <pre><code>from aiomailru import PasswordClientSession, API\nasync with PasswordClientSession(app_id, 'private key', email, passwd, scope) as session:\napi = API(session)\n...\n</code></pre>"},{"location":"session/#refreshclientsession","title":"RefreshClientSession","text":"<p><code>RefreshClientSession</code> is a subclass of <code>RefreshSession</code>.</p> <pre><code>from aiomailru import RefreshClientSession, API\nasync with RefreshClientSession(app_id, 'private key', refresh_token) as session:\napi = API(session)\n...\n</code></pre>"},{"location":"session/#server-server-signature-generation-circuit","title":"Server-Server signature generation circuit","text":"<p>Let's consider the following example of API request with server-server signature:</p> <pre><code>from aiomailru import TokenSession, API\nsession = TokenSession(\napp_id=423004,\nprivate_key='',\nsecret_key='3dad9cbf9baaa0360c0f2ba372d25716',\naccess_token='be6ef89965d58e56dec21acb9b62bdaa',\nuid='',\n)\napi = API(session)\nfriends = await api.friends.get()\n</code></pre> <p>It is equivalent to GET request:</p> <pre><code>https://appsmail.ru/platform/api\n    ?method=friends.get\n    &amp;app_id=423004\n&amp;session_key=be6ef89965d58e56dec21acb9b62bdaa\n    &amp;sig=4a05af66f80da18b308fa7e536912bae\n</code></pre> <p>The following steps were taken:</p> <ol> <li>parameter <code>secure</code> = <code>1</code> appended to parameters</li> <li>request parameters were sorted and concatenated - <code>app_id=423004method=friends.getsecure=1session_key=be6ef89965d58e56dec21acb9b62bdaa</code></li> <li>sorted request parameters and <code>secret_key</code> were concatenated - <code>1324730981306483817app_id=423004method=friends.getsession_key=be6ef89965d58e56dec21acb9b62bdaa3dad9cbf9baaa0360c0f2ba372d25716</code></li> <li>signature <code>4a05af66f80da18b308fa7e536912bae</code> calculated as MD5 of the previous string</li> <li>signature appended to GET request parameters</li> </ol> <p>For more details, see  https://api.mail.ru/docs/guides/restapi/#server.</p>"},{"location":"session/#serversession","title":"ServerSession","text":"<p><code>ServerSession</code> is a subclass of <code>TokenSession</code>.</p> <pre><code>from aiomailru import ServerSession, API\nsession = ServerSession(app_id, 'secret key', 'access token')\napi = API(session)\n...\n</code></pre>"},{"location":"session/#codeserversession","title":"CodeServerSession","text":"<p><code>CodeServerSession</code> is a subclass of <code>CodeSession</code>.</p> <pre><code>from aiomailru import CodeServerSession, API\nasync with CodeServerSession(app_id, 'secret key', code, redirect_uri) as session:\napi = API(session)\n...\n</code></pre>"},{"location":"session/#passwordserversession","title":"PasswordServerSession","text":"<p><code>PasswordServerSession</code> is a subclass of <code>PasswordSession</code>.</p> <pre><code>from aiomailru import PasswordServerSession, API\nasync with PasswordServerSession(app_id, 'secret key', email, password, scope) as session:\napi = API(session)\n...\n</code></pre>"},{"location":"session/#refreshserversession","title":"RefreshServerSession","text":"<p><code>RefreshServerSession</code> is a subclass of <code>RefreshSession</code>.</p> <pre><code>from aiomailru import RefreshServerSession, API\nasync with RefreshServerSession(app_id, 'secret key', refresh_token) as session:\napi = API(session)\n...\n</code></pre>"},{"location":"session/#response","title":"Response","text":"<p>By default, a session after executing request returns response's body as <code>dict</code> if executing was successful, otherwise it raises exception.</p> <p>You can pass <code>pass_error</code> parameter to <code>TokenSession</code> for returning original response (including errors).</p>"},{"location":"session/#error","title":"Error","text":"<p>In case of an error, by default, exception is raised. You can pass <code>pass_error</code> parameter to <code>TokenSession</code> for returning original error's body as <code>dict</code>:</p> <pre><code>{\n\"error\": {\n\"error_code\": 202,\n\"error_msg\": \"Access to this object is denied\"\n}\n}\n</code></pre>"}]}